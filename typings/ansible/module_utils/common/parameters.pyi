"""
This type stub file was generated by pyright.
"""

__metaclass__ = type
NoneType = ...
_ADDITIONAL_CHECKS = ...
PASS_VARS = ...
PASS_BOOLS = ...
DEFAULT_TYPE_VALIDATORS = ...

def env_fallback(*args, **kwargs):  # -> str:
    """Load value from environment variable"""
    ...

def set_fallbacks(argument_spec, parameters): ...
def sanitize_keys(obj, no_log_strings, ignore_keys=...):
    """Sanitize the keys in a container object by removing ``no_log`` values from key names.

    This is a companion function to the :func:`remove_values` function. Similar to that function,
    we make use of ``deferred_removals`` to avoid hitting maximum recursion depth in cases of
    large data structures.

    :arg obj: The container object to sanitize. Non-container objects are returned unmodified.
    :arg no_log_strings: A set of string values we do not want logged.
    :kwarg ignore_keys: A set of string values of keys to not sanitize.

    :returns: An object with sanitized keys.
    """
    ...

def remove_values(value, no_log_strings):
    """Remove strings in ``no_log_strings`` from value.

    If value is a container type, then remove a lot more.

    Use of ``deferred_removals`` exists, rather than a pure recursive solution,
    because of the potential to hit the maximum recursion depth when dealing with
    large amounts of data (see `issue #24560 <https://github.com/ansible/ansible/issues/24560>`_).
    """
    ...
